#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define ROW 5
#define COL 5

#define RED   "\x1B[31m"
#define BLU   "\x1B[34m"
#define GRN   "\x1B[32m"
#define YEL   "\x1B[33m"
#define RESET "\x1B[0m"

typedef struct {
    int row;
    int col;
} Worker;

typedef struct {
    char name[50];
    char color[20];
    char demigod[50];
    char powers[100];
} Player;

typedef struct {
    char domes[19];
    char level3[15];
    char level2[18];
    char level1[23];
} Buildings;

Buildings building[4];
Player player[2];
Worker worker[4];

char a[ROW][COL];
int unoccupied_blocks;

void initmap() {
    unoccupied_blocks=ROW*COL;
    for (int i=0;i<ROW;i++) {
        for (int j=0;j<COL;j++) {
            a[i][j]='-';
        }
    }
}

void initialiseworker() {
    worker[0].row=0; worker[0].col=0;
    worker[1].row=0; worker[1].col=4;
    worker[2].row=4; worker[2].col=0;
    worker[3].row=4; worker[3].col=4;
    unoccupied_blocks-=4;
}

void printboard() {
    for (int i=0;i<ROW;i++) {
        for (int j=0;j<COL;j++) {
            int worker_index=-1;
            for (int k=0;k<4;k++) {
                if (worker[k].row==i && worker[k].col==j) {
                    worker_index=k;
                    break;
                }
            }
            if (worker_index!=-1)
                printf("%sW%d%s ",player[worker_index/2].color,worker_index+1,RESET);
            else {
                if (a[i][j]=='-')
                    printf("%s%c%s ",BLU,a[i][j],RESET);
                else
                    printf("%s%c%s ", RED,a[i][j],RESET);
            }
        }
        printf("\n");
    }
}

bool isValidMove(int current_row,int current_col,int new_row,int new_col) {
    if (new_row<0 || new_row>=ROW || new_col<0 || new_col>=COL)
        return false;
    if (abs(new_row-current_row)>1 || abs(new_col-current_col)>1)
        return false;
    for (int i=0;i<4;i++) {
        if (worker[i].row==new_row && worker[i].col==new_col)
            return false;
    }
    if (a[new_row][new_col]=='D')
        return false;
    return true;
}

void moveworker(int indx,int newrow,int newcol) {
    if (isValidMove(worker[indx].row,worker[indx].col,newrow,newcol)) {
        if (a[newrow][newcol]=='-')
            unoccupied_blocks--;
        if (a[worker[indx].row][worker[indx].col]=='-')
            unoccupied_blocks++;
        worker[indx].row=newrow;
        worker[indx].col=newcol;
    } else {
        printf("Invalid move. Try again.\n");
    }
}

void initplayer() {
    for (int i = 0; i < 2; i++) {
        printf("Enter name for player %d: ",i+1);
        scanf("%s", player[i].name);
        printf("Enter color of the player %d (red, blue): ",i+1);
        scanf("%s", player[i].color);
        printf("Enter demigod for player %d: ",i+1);
        scanf("%s", player[i].demigod);
        printf("Enter powers for player %d: ",i+1);
        scanf("%s", player[i].powers);
    }
}

void printPlayers() {
    printf("\nPlayer Information:\n");
    for (int i=0;i<2;i++) {
        printf("Player %d\n",i+1);
        printf("Name: %s\n",player[i].name);
        printf("Color: %s\n",player[i].color);
        printf("Demigod: %s\n",player[i].demigod);
        printf("Powers: %s\n",player[i].powers);
        printf("\n");
    }
}

void initbuildings() {
    for (int i=0;i<4;i++) {
        strcpy(building[i].domes,"Domes:0");
        strcpy(building[i].level3,"level3:0");
        strcpy(building[i].level2,"level2:0");
        strcpy(building[i].level1,"level1:0");
    }
}
void highlightMoves(int worker_index) {
    int row=worker[worker_index].row;
    int col=worker[worker_index].col;
    for (int i=row-1;i<=row+1;i++) {
        for (int j=col-1;j<=col+1;j++) {
            if (isValidMove(row,col,i,j)) {
                printf("%s(%d,%d)%s ",YEL,i,j,RESET);
            }
        }
    }
    printf("\n");
}
void highlightBuilds(int workerIndex) {
    int row=worker[workerIndex].row;
    int col=worker[workerIndex].col;
    for (int i=row-1;i<=row+1;i++) {
        for (int j=col-1;j<=col+1;j++) {
            if (i>=0 && i<ROW && j>=0 && j<COL && a[i][j]=='-') {
                printf("%s(%d,%d)%s ",GRN,i,j,RESET);
            }
        }
    }
    printf("\n");
}
int main() {
    initmap();
    initialiseworker();
    printf("Initial board \n");
    printboard();
    initplayer();
    printPlayers();
    printf("Unoccupied blocks: %d\n",unoccupied_blocks);
    initbuildings();
    int turn=0;
    int winner=-1;
    while (winner==-1) {
        printf("Player %d's turn:\n",turn%2+1);
        int player_index=turn%2;
        int worker_index;
        printf("Select a worker (1-2)");
        scanf("%d",&worker_index);
        worker_index=(player_index*2)+(worker_index-1);
        printf("Possible moves for worker %d:\n",worker_index+1);
        highlightMoves(worker_index);
        printf("Enter row and column to move the worker: ");
        int new_row,new_col;
        scanf("%d %d",&new_row,&new_col);
        moveworker(worker_index,new_row,new_col);
        printf("Possible builds for worker %d:\n",worker_index+1);
        highlightBuilds(worker_index);
        printf("Enter row and column to build: ");
        int build_row,build_col;
        scanf("%d %d",&build_row,&build_col);
        if (isValidMove(worker[worker_index].row,worker[worker_index].col,build_row,build_col)) {
            a[build_row][build_col]='D';
        } else {
            printf("Invalid build. Try again.\n");
        }
        printboard();
        if (new_row==3 || new_col==3) {
            winner=player_index;
            break;
        }
        turn++;
    }
    printf("Player %d wins!\n",winner+1);
    return 0;
}
